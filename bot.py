import telebot # type: ignore
from telebot import types # type: ignore # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
import json
from User import User
with open("text.json", "r", encoding='utf-8') as f:
    content = json.load(f)

bot = telebot.TeleBot(content['telegramToken'], parse_mode='MARKDOWN')
userInfo = User.getDumps()



def sendStage(id, currentStage):
    global userInfo
    if not "buttons" in currentStage.keys() or len(currentStage['buttons'])==0:
        reply_markup = types.ReplyKeyboardRemove()
    else:
        reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for button in currentStage['buttons']:
            reply_markup.add(types.KeyboardButton(button["text"]))
    
    if "order" in currentStage.keys():
        order = currentStage["order"]
    else:
        order = ["text", "photo", "audio", "circles", "poll", "poll_no_right_answer"]
    
    for key in order:
        if not key in currentStage.keys():
            continue
        if "text" in [key]:
            newText = currentStage["text"].replace("%%USERNAME%%", userInfo[id].name)    
            if not reply_markup is None:        
                bot.send_message(id, text=newText, reply_markup=reply_markup)
            else:
                bot.send_message(id, text=newText)
        if "photo" in [key]:
            for photo_path in currentStage["photo"]:
                with open(photo_path, 'rb') as photo_file:
                    bot.send_photo(id, photo_file, reply_markup=reply_markup)
        if "audio" in [key]:
            for audio_path in currentStage["audio"]:
                with open(audio_path, 'rb') as audio_file:
                    bot.send_voice(id, audio_file, reply_markup=reply_markup)
        if "circles" in [key]:
            for circle_path in currentStage["circles"]:
                with open(circle_path, 'rb') as circle_file:
                    bot.send_video_note(id, circle_file, reply_markup=reply_markup)
        if "poll" in [key]:
            pollInfo = currentStage['poll']
            bot.send_poll(id, pollInfo['question'], pollInfo['options'], type="quiz", correct_option_id=pollInfo['correct_option_id'], is_anonymous=False)
        if "poll_no_right_answer" in [key]:
            pollInfo = currentStage['poll_no_right_answer']
            bot.send_poll(id, pollInfo['question'], pollInfo['options'], type="regular", is_anonymous=False)

def sendNextStage(id):
    global userInfo
    userInfo[id].nextStage()
    userInfo[id].misinput=0
    sendStage(id, userInfo[id].currentStage())
    



@bot.message_handler(commands=['start']) 
def start_handler(message):
    global content
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # btn1 = types.KeyboardButton("")
    # btn2 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
    # btn3 = types.KeyboardButton("–û–± —ç–∫—Å–∫—É—Ä—Å–∏–∏")
    # markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! \n–ù–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Äc–∏—é üëâ /excursion \n–û–± —ç–∫—Å–∫—É—Ä—Å–∏–∏ üëâ /about \n–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π üëâ  /parents ".format(message.from_user))
    if not message.from_user.id in userInfo.keys():
        userInfo[message.from_user.id] = User(message.from_user.id, message.from_user.first_name, content['content'])
    else:
        userInfo[message.from_user.id].reset()



@bot.message_handler(commands=['excursion']) 
def exc_handler(message): 
    global userInfo
    userInfo[message.from_user.id].reset() 
    sendNextStage(message.from_user.id)


@bot.message_handler(commands=['block1', "block2", "block3", "block4", "block5", "block6", "block7", "block8", "fork"]) 
def map_handler(message):
    map_ = {
        'block1':0, 
        "block2":15, 
        "block3":15+22, 
        "block4":15+22+17, 
        "block5":15+22+17+16, 
        "block6":15+22+17+16+14, 
        "block7":15+22+17+16+14+17, 
        "block8":15+22+17+16+14+17+16,
        "fork":15+22+17+16+14-2
    }
    global userInfo
    userInfo[message.from_user.id].setStage(map_[message.text.replace("/",'')]-1)    
    sendNextStage(message.from_user.id)


@bot.message_handler(commands=['parents']) 
def parents_handler(message):
    global userInfo
    if userInfo[message.from_user.id].atNegativeStage(): # –±–ª–æ–∫ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        bot.send_message(message.from_user.id, text='*–ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–µ–∂–¥–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∏–∂–µ:*\n1) –ï—Å–ª–∏ —É —Ä–µ–±–µ–Ω–∫–∞ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —á—Ç–µ–Ω–∏–µ–º, –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –∑–∞ –Ω–µ–≥–æ.\n2) –ï—Å–ª–∏ —É —Ä–µ–±–µ–Ω–∫–∞ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–Ω—è—Ç—å, –æ–±—ä—è—Å–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–∞ –∑–Ω–∞–∫–æ–º—ã—Ö –∞–Ω–∞–ª–æ–≥–∏—è—Ö.\n3) –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π –∏ –ø–æ–Ω–∏–º–∞—Ç—å —É—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è.\n4) –ù–µ –æ—Ç–º–µ—á–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –∑–∞ —Ä–µ–±—ë–Ω–∫–∞, –æ–Ω –¥–æ–ª–∂–µ–Ω –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–≤–æ–∏—Ö —Ä—É–∫–∞—Ö –≤—Å—é —ç–∫—Å–∫—É—Ä—Å–∏—é, —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ—â—É—â–µ–Ω–∏—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n5) –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç-–±–æ—Ç–µ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–µ–±–µ–Ω–∫—É –ø–æ—Ä–∞—Å—Å—É–∂–¥–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –≤–∞–º–∏, —á—Ç–æ–±—ã —Ä–µ–±—ë–Ω–æ–∫ —Å–∞–º –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n6) –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–µ —Å–ø–µ—à–∏—Ç–µ –≥—É–≥–ª–∏—Ç—å. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–µ–±—ë–Ω–∫—É –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–∏–Ω–∏-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞. –ò–∑ —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.')


@bot.message_handler(commands=['about']) 
def about_handler(message):
    global userInfo
    if userInfo[message.from_user.id].atNegativeStage(): # –±–ª–æ–∫ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        bot.send_message(message.from_user.id, text="üå≥ *–¶–∏—Ñ—Ä–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –¢–∞–≤—Ä–∏—á–µ—Å–∫–æ–º—É —Å–∞–¥—É –¥–ª—è –º–ª–∞–¥—à–∏—Ö —à–∫–æ–ª—å–Ω–∏–∫–æ–≤*\n\nüëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å!*\n–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ —á—É–¥–µ—Å–Ω—ã–º —É–≥–æ–ª–∫–∞–º –¢–∞–≤—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–¥–∞! –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º—ã –±—É–¥–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à—É—é –æ–±–ª–∞—Å—Ç—å, –Ω–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ!\n\nüíö *–ö–æ–º—É –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è?*  \n–≠—Ç–∞ —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 7-11 –ª–µ—Ç –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º–∏, —Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–µ–∂–¥–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ –±–ª–æ–∫–µ ¬´–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π¬ª. \n\nü§∑ *–ö—Ç–æ –º—ã?*\n–≠–∫—Å–∫—É—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –ª—é–±–æ–≤—å—é –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–∫ DH-—Ü–µ–Ω—Ç—Ä–∞ –ò–¢–ú–û, –®–∞–ø–æ—à–Ω–∏–∫–æ–≤–æ–π –û–∫—Å–∞–Ω–æ–π –∏ –°–æ—Ä–æ–∫–æ–ª–µ—Ç–æ–≤–æ–π –ï–ª–∏–∑–∞–≤–µ—Ç–æ–π. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!\n\n‚åö*–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç?*  \n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å –Ω–∞–º–∏ –æ–∫–æ–ª–æ —á–∞—Å–∞. –í—Ä–µ–º—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–∞ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –∏ –≤—ã–±–æ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ—ë, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç–µ –≤ —Å–∞–¥—É. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º!\n\nüó∫ *–ì–¥–µ –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?*  \n–≠–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –≤—Ö–æ–¥–∞ –≤ –¢–∞–≤—Ä–∏—á–µ—Å–∫–∏–π —Å–∞–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –®–ø–∞–ª–µ—Ä–Ω–æ–π —É–ª–∏—Ü—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç –¥–æ—Ä–æ–∂–∫–∏ —É –≤—Ö–æ–¥–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–æ—Å—Ç–∞ –≤–¥–æ–ª—å –æ–≥—Ä–∞–¥—ã. –ú—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–µ —É–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –ø–∞—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–ª –≤–∞–º –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–æ–π!\n\nüå±*–ß—Ç–æ –≤ –æ—Å–Ω–æ–≤–µ?*  \n–ù–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏ XX –≤–µ–∫–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏–º–∏ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –Ω–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–µ–Ω–æ–º–µ–Ω–µ —ç—Ç–∏—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –≤ [—Å—Ç–∞—Ç—å–µ](https://vk.com/@smo_spbu-estestvenno-istoricheskie-ekskursii-po-petrogradu-be-raikova) –®–∞–ø–æ—à–Ω–∏–∫–æ–≤–æ–π –û–∫—Å–∞–Ω—ã. –í—ã –Ω–µ —Ç–æ–ª—å–∫–æ —É–≤–∏–¥–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ—Å—Ç–∞, –Ω–æ –∏ –≤ –±—É–∫–≤–∞–ª—å–Ω–æ–º —Å–º—ã—Å–ª–µ –ø—Ä–∏–∫–æ—Å–Ω—ë—Ç–µ—Å—å –∫ –ø—Ä–∏—Ä–æ–¥–µ!")
        #bot.send_message(message.from_user.id, text="‚åö*–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç?*  \n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å –Ω–∞–º–∏ –æ–∫–æ–ª–æ —á–∞—Å–∞. –í—Ä–µ–º—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–∞ –µ—ë –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –∏ –≤—ã–±–æ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ—ë, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç–µ –≤ —Å–∞–¥—É. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º!\n\nüó∫ *–ì–¥–µ –≤—Å–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?*  \n–≠–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –≤—Ö–æ–¥–∞ –≤ –¢–∞–≤—Ä–∏—á–µ—Å–∫–∏–π —Å–∞–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –®–ø–∞–ª–µ—Ä–Ω–æ–π —É–ª–∏—Ü—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç –¥–æ—Ä–æ–∂–∫–∏ —É –≤—Ö–æ–¥–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–æ—Å—Ç–∞ –≤–¥–æ–ª—å –æ–≥—Ä–∞–¥—ã. –ú—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º–æ–µ —É–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –ø–∞—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–ª –≤–∞–º –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–æ–π!\n\nüå±*–ß—Ç–æ –≤ –æ—Å–Ω–æ–≤–µ?*  \n–ù–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏ XX –≤–µ–∫–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏–º–∏ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –Ω–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–µ–Ω–æ–º–µ–Ω–µ —ç—Ç–∏—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –≤ [—Å—Ç–∞—Ç—å–µ](https://vk.com/@smo_spbu-estestvenno-istoricheskie-ekskursii-po-petrogradu-be-raikova) –®–∞–ø–æ—à–Ω–∏–∫–æ–≤–æ–π –û–∫—Å–∞–Ω—ã. –í—ã –Ω–µ —Ç–æ–ª—å–∫–æ —É–≤–∏–¥–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ—Å—Ç–∞, –Ω–æ –∏ –≤ –±—É–∫–≤–∞–ª—å–Ω–æ–º —Å–º—ã—Å–ª–µ –ø—Ä–∏–∫–æ—Å–Ω—ë—Ç–µ—Å—å –∫ –ø—Ä–∏—Ä–æ–¥–µ!")

def check_for_fork(message, currentStage):
    if not "buttons" in currentStage.keys() or len(currentStage['buttons'])==0:
        return True
    
    for button in currentStage['buttons']:
        if message.text == button['text']:
            if button["type"]=="fork_continue":
                return True
            elif button["type"]=="fork_skip_next":
                return False
    return None


def check_for_term(message, currentStage):
    if not "buttons" in currentStage.keys() or len(currentStage['buttons'])==0:
        return True
    
    for button in currentStage['buttons']:
        if message.text == button['text']:
            if button["type"]=="term_positive":
                return True
            elif button["type"]=="term_skip_next":
                return False
    return None

def check_for_input(message, currentStage):
    if not "check_options" in currentStage.keys() or len(currentStage['check_options'])==0:
        return True
    
    text = str(message.text).lower().strip()

    for option in currentStage['check_options']:
        if text == option:
            return True
    return False

def check_for_right_answer(message, currentStage):
    if not "buttons" in currentStage.keys() or len(currentStage['buttons'])==0:
        return True
    
    for button in currentStage['buttons']:
        if message.text == button['text']:
            return True
    return False
    
@bot.message_handler(content_types=['text'])
def general_message_handler(message):
    global userInfo
    if userInfo[message.from_user.id].atNegativeStage(): # –±–ª–æ–∫ –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (message.text == '–ù–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é'):
            sendNextStage(message.from_user.id)                   
        elif (message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π"): 
            bot.send_message(message.from_user.id, text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π')
        elif (message.text == "–û–± —ç–∫—Å–∫—É—Ä—Å–∏–∏"): 
            bot.send_message(message.from_user.id, text='–û–± —ç–∫—Å–∫—É—Ä—Å–∏–∏') 
        return      
    else: # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        currentStage = userInfo[message.from_user.id].currentStage()
        if "actions" in currentStage.keys() and "term" in currentStage['actions']:
            res = check_for_term(message, currentStage) 
            if res is True:
                sendNextStage(message.from_user.id)
            elif res is False:
                skip_steps = 1
                if "term_skip_steps" in currentStage.keys():
                    skip_steps = int(currentStage["term_skip_steps"])
                userInfo[message.from_user.id].addStage(skip_steps)
                sendNextStage(message.from_user.id)
            else:
                if userInfo[message.from_user.id].misinput < 2:
                    bot.send_message(message.from_user.id, text='–ù–µ –ø–æ–Ω—è–ª –æ—Ç–≤–µ—Ç ü§î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
                    userInfo[message.from_user.id].misinput += 1
                else:
                    sendNextStage(message.from_user.id)
            return
        elif "actions" in currentStage.keys() and "fork" in currentStage['actions']:
            res = check_for_fork(message, currentStage) 
            if res is True: # fork_continue
                sendNextStage(message.from_user.id)
            elif res is False: # fork_skip_next
                skip_steps = 1
                if "fork_skip_steps" in currentStage.keys():
                    skip_steps = int(currentStage["fork_skip_steps"])
                userInfo[message.from_user.id].addStage(skip_steps)                
                userInfo[message.from_user.id].insertMany(currentStage['fork_substitution'])  
                sendNextStage(message.from_user.id)
                return
            else:
                if userInfo[message.from_user.id].misinput < 2:
                    bot.send_message(message.from_user.id, text='–ù–µ –ø–æ–Ω—è–ª –æ—Ç–≤–µ—Ç ü§î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
                    userInfo[message.from_user.id].misinput += 1
                else:
                    sendNextStage(message.from_user.id)
                
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥–∞–¥–∫–µ
        elif "actions" in currentStage.keys() and "check_input" in currentStage['actions']:
            res = check_for_input(message, currentStage) 
            if userInfo[message.from_user.id].check_input_started is False:
                userInfo[message.from_user.id].check_input_started = True
                userInfo[message.from_user.id].check_input_amout = 0
            if res is True or userInfo[message.from_user.id].check_input_amout >= currentStage["try_amount"]: # –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
                userInfo[message.from_user.id].check_input_started = False
                sendNextStage(message.from_user.id)
                return
            elif res is False: # –µ—Å–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–µ–∫—Ü–∏—é wrong
                userInfo[message.from_user.id].check_input_amout += 1
                sendStage(message.from_user.id, userInfo[message.from_user.id].currentStage()['if_wrong'])
                return
             
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
        elif "actions" in currentStage.keys() and "checkName" in currentStage['actions']:
            print(message.text)
            userInfo[message.from_user.id].name = message.text
            userInfo[message.from_user.id].nameAnswered = True
            
        # check for right answer 
        if check_for_right_answer(message, currentStage): # –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∫–Ω–æ–ø–∫–∞–º
            sendNextStage(message.from_user.id)
        else:
            if userInfo[message.from_user.id].misinput < 2:
                bot.send_message(message.from_user.id, text='–ù–µ –ø–æ–Ω—è–ª –æ—Ç–≤–µ—Ç ü§î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
                userInfo[message.from_user.id].misinput += 1
            else:
                sendNextStage(message.from_user.id)


@bot.poll_answer_handler()
def handle_poll_answer(pollAnswer):
    sendNextStage(pollAnswer.user.id)
    


bot.polling(none_stop=True)